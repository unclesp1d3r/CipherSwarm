---
description: 
globs: 
alwaysApply: false
---
# CipherSwarm Core Concepts Appendix

## UI/HTML/Flowbite Code Samples

### File Input with Drag-Drop
```html
<form class="flex items-center space-x-6">
  <div class="shrink-0">
    <img
      class="h-16 w-16 object-cover"
      src="/docs/images/people/profile-picture-3.jpg"
      alt="Current profile photo"
    />
  </div>
  <label class="block">
    <span class="sr-only">Choose file</span>
    <input
      type="file"
      class="block w-full text-sm text-gray-500
      file:mr-4 file:py-2 file:px-4
      file:rounded-full file:border-0
      file:text-sm file:font-semibold
      file:bg-blue-50 file:text-blue-700
      hover:file:bg-blue-100
    "
    />
  </label>
</form>
```

### Progress Bar
```html
<div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
  <div class="bg-blue-600 h-2.5 rounded-full" style="width: 45%"></div>
</div>
```

### Alert Notification
```html
<div
  class="p-4 mb-4 text-sm text-blue-800 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400"
  role="alert"
>
  <span class="font-medium">Upload Complete!</span> File has been
  processed and stored.
</div>
```

### Data Table
```html
<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
  <table
    class="w-full text-sm text-left text-gray-500 dark:text-gray-400"
  >
    <thead
      class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
    >
      <tr>
        <th scope="col" class="px-6 py-3">Resource name</th>
        <th scope="col" class="px-6 py-3">Type</th>
        <th scope="col" class="px-6 py-3">Size</th>
        <th scope="col" class="px-6 py-3">Upload Date</th>
        <th scope="col" class="px-6 py-3">Action</th>
      </tr>
    </thead>
    <!-- Table body -->
  </table>
</div>
```

### Modal Dialog
```html
<div
  id="preview-modal"
  tabindex="-1"
  aria-hidden="true"
  class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full"
>
  <div class="relative w-full max-w-2xl max-h-full">
    <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
      <!-- Modal header -->
      <!-- Modal body -->
      <!-- Modal footer -->
    </div>
  </div>
</div>
```

### Action Button
```html
<button
  type="button"
  class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
>
  Download
</button>
```

### Card Example
```html
<div
  class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700"
>
  <h5
    class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white"
  >
    Resource Details
  </h5>
  <!-- Card content -->
</div>
```

---

## Docker Compose YAML Examples

### Development
```yaml
# docker-compose.dev.yml
version: "3.8"
services:
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile.dev
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=development
      - DEBUG=1
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - minio

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=cipherswarm
      - POSTGRES_PASSWORD=development
      - POSTGRES_DB=cipherswarm_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"

volumes:
  postgres_data:
  redis_data:
  minio_data:
```

### Production
```yaml
# docker-compose.prod.yml
version: "3.8"
services:
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile.prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
    depends_on:
      - db
      - redis
      - minio

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./static:/usr/share/nginx/html/static
      - ./certs:/etc/nginx/certs
    depends_on:
      - app

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/backup:/backup

  redis:
    image: redis:alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    restart: unless-stopped
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"

volumes:
  postgres_data:
  redis_data:
  minio_data:
```

---

## Cashews Caching Code Examples

### Decorator Usage
```python
from cashews import cache

cache.setup("mem://")  # in memory; use redis://host for production

@cache(ttl="30s")
async def get_campaign_stats():
    ...
```

### Non-Decorator Usage
```python
stats = await cache.get("campaign_stats")
if not stats:
    stats = await compute_stats()
    await cache.set("campaign_stats", stats, ttl="30s")
```

Note: cache.setup() should run once at app startup (startup_event or ASGI lifespan).

---

## Authentication Header Examples

### Agent API
```http
Authorization: Bearer csa_<agent_id>_<token>
User-Agent: CipherSwarm-Agent/<version>
```

### TUI API
```http
Authorization: Bearer cst_<user_id>_<token>
User-Agent: CipherSwarm-TUI/<version>
```

---

## Project Structure Tree

```text
CipherSwarm/
├── app/
│   ├── api/            # API endpoints
│   ├── core/           # Core application logic
│   ├── db/             # Database configuration
│   ├── models/         # SQLAlchemy models
│   ├── schemas/        # Pydantic schemas
│   └── web/           # Web routes and templates
├── alembic/           # Database migrations
├── static/            # Static assets
├── templates/         # HTML templates
├── docker/            # Docker configuration files
│   ├── app/           # FastAPI application Dockerfile and configs
│   ├── nginx/         # Nginx reverse proxy configs
│   └── scripts/       # Docker helper scripts
├── docker-compose.yml # Main compose file
├── docker-compose.dev.yml # Development overrides
└── docker-compose.prod.yml # Production overrides
```

---


## Docker Configuration


   ```yaml
   # docker-compose.dev.yml
   version: "3.8"
   services:
     app:
       build:
         context: .
         dockerfile: docker/app/Dockerfile.dev
       volumes:
         - .:/app
       environment:
         - ENVIRONMENT=development
         - DEBUG=1
       ports:
         - "8000:8000"
       depends_on:
         - db
         - redis
         - minio

     db:
       image: postgres:16-alpine
       environment:
         - POSTGRES_USER=cipherswarm
         - POSTGRES_PASSWORD=development
         - POSTGRES_DB=cipherswarm_dev
       volumes:
         - postgres_data:/var/lib/postgresql/data
       ports:
         - "5432:5432"

     redis:
       image: redis:alpine
       ports:
         - "6379:6379"
       volumes:
         - redis_data:/data

     minio:
       image: minio/minio
       ports:
         - "9000:9000"
         - "9001:9001"
       volumes:
         - minio_data:/data
       environment:
         - MINIO_ROOT_USER=minioadmin
         - MINIO_ROOT_PASSWORD=minioadmin
       command: server /data --console-address ":9001"

   volumes:
     postgres_data:
     redis_data:
     minio_data:
   ```

3. **Production Setup**

   ```yaml
   # docker-compose.prod.yml
   version: "3.8"
   services:
     app:
       build:
         context: .
         dockerfile: docker/app/Dockerfile.prod
       restart: unless-stopped
       environment:
         - ENVIRONMENT=production
       depends_on:
         - db
         - redis
         - minio

     nginx:
       build:
         context: ./docker/nginx
         dockerfile: Dockerfile
       ports:
         - "80:80"
         - "443:443"
       volumes:
         - ./static:/usr/share/nginx/html/static
         - ./certs:/etc/nginx/certs
       depends_on:
         - app

     db:
       image: postgres:16-alpine
       restart: unless-stopped
       environment:
         - POSTGRES_USER=${DB_USER}
         - POSTGRES_PASSWORD=${DB_PASSWORD}
         - POSTGRES_DB=${DB_NAME}
       volumes:
         - postgres_data:/var/lib/postgresql/data
         - ./docker/postgres/backup:/backup

     redis:
       image: redis:alpine
       restart: unless-stopped
       command: redis-server --requirepass ${REDIS_PASSWORD}
       volumes:
         - redis_data:/data

     minio:
       image: minio/minio
       restart: unless-stopped
       volumes:
         - minio_data:/data
       environment:
         - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
         - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
       command: server /data --console-address ":9001"

   volumes:
     postgres_data:
     redis_data:
     minio_data:
   ```

