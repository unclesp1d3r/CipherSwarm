---
description: 
globs: 
alwaysApply: true
---
# CipherSwarm Core Concepts

## Project Overview

CipherSwarm is a distributed password cracking management system built with FastAPI and HTMX. It coordinates multiple agents running hashcat to efficiently distribute password cracking tasks across a network of machines.

## Critical Requirements

### API Compatibility

1. **Agent API Versions**

CipherSwarm supports two active versions of the Agent API:

- **v1: Legacy Compatibility (`/api/v1/client/*`)**

  - Mirrors the legacy Ruby-on-Rails version of CipherSwarm (https://github.com/unclesp1d3r/CipherSwarm).
  - Locked to `swagger.json` (OpenAPI 3.0.1).
  - Must match every field, enum, and response exactly.
  - Breaking changes are prohibited.

- **v2: FastAPI-Native (`/api/v2/client/*`)**
  - NOT YET IMPLEMENTED. Will be created in the future.
  - Not constrained by the legacy spec.
  - Idiomatic FastAPI designs, updated schemas, and improved flows are allowed.
  - Breaking changes are allowed with proper versioning and documentation.
  - Cannot interfere in any way with the v1 Agent API. 

Agents must declare their version or use version-specific routes. Future versions (v3, etc.) will follow the same model.

2. **Testing Requirements**
   - Automated tests must validate API responses against OpenAPI specification
   - Contract testing must ensure specification compliance
   - Integration tests must verify exact schema matches
   - CI/CD must include specification validation

## Architecture

### Backend Components

1. **FastAPI Application**

   - Core application server built with FastAPI
   - Asynchronous request handling
   - JWT-based authenticattapi-users for authentication and user management
   - OpenAPI 3.0.1 specification
   - SQLAlchemy ORM with PostgreSQL
   - Cachews for caching
   - Celery for task queues

2. **Database Models**  
    The backend defines a set of structured models to represent key operational and engagement data. These include:

   - `Project`: The top-level organizational and security boundary. Projects isolate agents, campaigns, hash lists, and users from one another. Access control is enforced at the project level, and no data is shared across projects without explicit export.
   - `Campaign`: A coordinated set of cracking attempts targeting a single hash list. Each campaign groups multiple attacks and serves as the operational unit for tracking progress and outcomes.
   - `Attack`: A specific cracking configuration (mode, rules, masks, charsets, etc.) used within a campaign. Multiple attacks may be chained or run in sequence under a campaign to exhaust various approaches.
   - `Task`: A discrete unit of work derived from an attack, assigned to a single agent. A task defines the keyspace slice, associated resources, and reporting path.
   - `HashList`: A set of hashes targeted by a campaign. Each campaign is linked to one hash list, but a hash list may be reused across multiple campaigns.
   - `HashItem`: An individual hash within a hash list. May include format-specific metadata such as salt or encoding. They may also contain user-defined metadata such as username and source, which should be stored as a JSONB.
   - `Agent`: A registered client capable of executing tasks. Agents report capability benchmarks, maintain a stateful heartbeat, and are tracked for version, platform, and operational health.
   - `CrackResult`: A record of a successfully cracked hash. Includes metadata about the agent, attack, and time of discovery.
   - `AgentError`: A fault or exception reported by an agent, optionally tied to a specific attack.
   - `Session`: Tracks the lifecycle of an active task execution, including live progress, last update time, and final disposition.
   - `Audit`: Historical log of user and system actions. Tracks changes to campaigns, attacks, task states, and user activity for accountability.
   - `User`: An authenticated entity authorized to access projects and perform actions. Permissions are scoped by role (`admin`, `user`, `power user`) and project membership.

   **Relationships**

- A Project has many Campaigns, but each Campaign belongs to exactly one Project.
- A User may belong to many Projects, and a Project may have many Users. (Many-to-many)
- A Campaign has many Attacks, but each Attack belongs to exactly one Campaign.
- An Attack has one or more Tasks, but each Task belongs to exactly one Attack.
- A Campaign is associated with a single HashList, but a HashList can be associated with many Campaigns. (Many-to-one from Campaign to HashList)
- A HashList has many HashItems, and a HashItem can belong to many HashLists. (Many-to-many)
- A CrackResult is associated with exactly one Attack, one HashItem, and one Agent.
- An AgentError always belongs to one Agent, and may optionally be associated with a single Attack.

Join tables such as `AgentsProjects` are used to enforce multi-tenancy boundaries or cross-link entities.

3. **API Interfaces**
   a. **Agent API** (`/api/v1/client/*`)

   - MUST follow OpenAPI 3.0.1 specification in `swagger.json`
   - Used by distributed CipherSwarm agents
   - Handles agent registration and heartbeat
   - Task distribution and result collection
   - Benchmark submission
   - Error reporting
   - Located under `app/api/v1/endpoints/agent` directory; wasn't previously located there, but should be moved.
   - Endpoints (as defined in specification):
     - `/api/v1/client/agents/*`: Agent lifecycle management
     - `/api/v1/client/attacks/*`: Attack configuration retrieval
     - `/api/v1/client/tasks/*`: Task management
     - `/api/v1/client/crackers/*`: Cracker binary updates

   **Router File Structure:**
   Each `/api/v1/client/<resource>` endpoint must be implemented in its own router file under `app/api/v1/endpoints/agent/<resource>.py`, except for root-level, non-resource endpoints, which are grouped in `general.py`.

   | Endpoint Path                  | Router File                                   |
   | ------------------------------ | --------------------------------------------- |
   | `/api/v1/client/agents/*`      | `app/api/v1/endpoints/agent/agent.py`         |
   | `/api/v1/client/attacks/*`     | `app/api/v1/endpoints/agent/attacks.py`       |
   | `/api/v1/client/tasks/*`       | `app/api/v1/endpoints/agent/tasks.py`         |
   | `/api/v1/client/crackers/*`    | `app/api/v1/endpoints/agent/crackers.py`      |
   | `/api/v1/client/configuration` | `app/api/v1/endpoints/agent/general.py`       |
   | `/api/v1/client/authenticate`  | `app/api/v1/endpoints/agent/general.py`       |

   > **Standard:** All root-level, non-resource endpoints for an API interface (e.g., Agent, Web, TUI) should be grouped in a `general.py` file under the relevant endpoints directory.

   b. **Web UI API** (`/api/v1/web/*`)

   - Powers the HTMX-based web interface
   - Campaign and attack creation/management
   - Real-time monitoring and statistics
   - Agent fleet management
   - Results visualization
   - Located under `app/api/v1/endpoints/web` directory; wasn't previously located there, but should be moved.
   - Endpoints:
     - `/api/v1/web/campaigns/*`: Campaign management
     - `/api/v1/web/attacks/*`: Attack configuration
     - `/api/v1/web/agents/*`: Agent monitoring
     - `/api/v1/web/dashboard/*`: System statistics

   c. **TUI API** (`/api/v1/tui/*`)

   - Future Python TUI client interface
   - Command-line based management
   - Real-time monitoring
   - Batch operations
   - Scriptable interface
   - Located under `app/api/v1/endpoints/tui` directory; wasn't previously located there, but should be moved.
   - Endpoints:
     - `/api/v1/tui/campaigns/*`: Campaign operations
     - `/api/v1/tui/attacks/*`: Attack management
     - `/api/v1/tui/agents/*`: Agent control
     - `/api/v1/tui/stats/*`: Performance metrics

   c. **Shared Infrastructure API**

   - Provides endpoints used by all major interfaces (Agent, Web UI, TUI)
   - Examples: `/api/v1/users`, `/api/v1/resources/{resource_id}/download`
   - Implemented in `app/api/v1/endpoints/users.py` and `resources.py`
   - Not specific to a single interface; provides common infrastructure (user management, resource access, etc.)
   - Standard for any future endpoints that must be accessible to multiple API clients

   > **Standard:** All endpoints that serve as shared infrastructure (e.g., user listing, resource download) should be grouped under this API and documented as such. These endpoints are versioned and maintained alongside the other API interfaces.

### Frontend Components

1. **HTMX-Based UI**

   - Server-side rendered templates
   - Real-time updates via HTMX
   - Tailwind CSS styling with Flowbite components
   - Modal-based forms
   - Toast notifications

2. **Component Library**

   - Use Flowbite components as the primary UI library
   - Over 400+ pre-built components available
   - Enterprise-ready dashboard components
   - Consistent design language across the application
   - Built-in dark mode support
   - Accessibility compliant
   - Key components used:
     - Data tables for task management
     - Progress indicators for cracking status
     - Alert components for notifications
     - Modal dialogs for configuration
     - Form components for attack setup
     - Cards for agent and task display
     - Navigation components for dashboard layout
     - Stats components for metrics display

3. **Key Features**

   - Agent management dashboard
   - Attack configuration interface
   - Real-time task monitoring
   - Results visualization

4. **Python TUI** (Planned)
   - Command-line interface
   - Real-time monitoring
   - Batch operations
   - Scriptable workflows

## Core Concepts

### Agent Management

1. **Agent States**

   - `pending`: Initial registration state
   - `active`: Ready for tasks
   - `stopped`: Manually paused
   - `error`: Encountered issues

2. **Agent Configuration**
   - Update intervals
   - Device selection (CPU/GPU)
   - Hashcat configuration
   - Benchmark management

### Attack System

1. **Attack Modes**

   - Dictionary attacks
   - Mask attacks
   - Hybrid dictionary attacks
   - Hybrid mask attacks

2. **Attack Resources**

   - Word lists
   - Rule lists
   - Mask patterns
   - Custom charsets

3. **Resource Storage**
   - All static attack resources stored in MinIO S3-compatible storage
   - Resources include:
     - Word lists for dictionary attacks
     - Rule lists for rule-based attacks
     - Mask pattern lists for mask attacks
     - Custom charset files
   - Each resource file has:
     - Unique identifier
     - MD5 checksum for verification
     - Metadata including size, upload date, and description
     - S3 presigned URLs for secure agent downloads
   - Web UI requirements:
     - Direct file uploads to MinIO buckets
     - Progress tracking for large files
     - Checksum verification
     - Resource management interface
     - File preview capabilities
     - Resource tagging and categorization
   - MinIO Configuration:
     - Bucket Structure:
       - `wordlists/`: Dictionary attack word lists
       - `rules/`: Hashcat rule files
       - `masks/`: Mask pattern files
       - `charsets/`: Custom charset definitions
       - `temp/`: Temporary storage for uploads
     - File Organization:
       - Files stored with UUID-based names
       - Original filenames stored in metadata
       - Version control through metadata tags
     - Backup Configuration:
       - Automatic daily snapshots
       - Version retention policies
       - Cross-region replication (optional)
   - Security Implementation:
     - Access Control:
       - Bucket policies for strict access control
       - Temporary presigned URLs for agent downloads
       - Role-based access for web UI users
       - IP-based restrictions for agent access
     - Data Protection:
       - Server-side encryption at rest
       - TLS for all transfers
       - Automatic virus scanning for uploads
       - File type verification
     - Monitoring:
       - Access logging
       - Usage metrics
       - Error tracking
       - Quota management
   - UI Implementation (Flowbite Components):
     - File Upload Interface:
       - Drag-and-drop zone with progress bar
       - Multi-file upload support
       - Upload queue management
       - Used components:
         - File input with drag-drop (`<FileInput>`)
         ```html
         <form class="flex items-center space-x-6">
           <div class="shrink-0">
             <img
               class="h-16 w-16 object-cover"
               src="/docs/images/people/profile-picture-3.jpg"
               alt="Current profile photo"
             />
           </div>
           <label class="block">
             <span class="sr-only">Choose file</span>
             <input
               type="file"
               class="block w-full text-sm text-gray-500
               file:mr-4 file:py-2 file:px-4
               file:rounded-full file:border-0
               file:text-sm file:font-semibold
               file:bg-blue-50 file:text-blue-700
               hover:file:bg-blue-100
             "
             />
           </label>
         </form>
         ```
         - Progress bars (`<Progress>`)
         ```html
         <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
           <div class="bg-blue-600 h-2.5 rounded-full" style="width: 45%"></div>
         </div>
         ```
         - Alert notifications (`<Alert>`)
         ```html
         <div
           class="p-4 mb-4 text-sm text-blue-800 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400"
           role="alert"
         >
           <span class="font-medium">Upload Complete!</span> File has been
           processed and stored.
         </div>
         ```
     - Resource Management:
       - Data table with sorting/filtering
       - Bulk operations support
       - Preview modal for text files
       - Used components:
         - Data tables (`<Table>`)
         ```html
         <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
           <table
             class="w-full text-sm text-left text-gray-500 dark:text-gray-400"
           >
             <thead
               class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
             >
               <tr>
                 <th scope="col" class="px-6 py-3">Resource name</th>
                 <th scope="col" class="px-6 py-3">Type</th>
                 <th scope="col" class="px-6 py-3">Size</th>
                 <th scope="col" class="px-6 py-3">Upload Date</th>
                 <th scope="col" class="px-6 py-3">Action</th>
               </tr>
             </thead>
             <!-- Table body -->
           </table>
         </div>
         ```
         - Modal dialogs (`<Modal>`)
         ```html
         <div
           id="preview-modal"
           tabindex="-1"
           aria-hidden="true"
           class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full"
         >
           <div class="relative w-full max-w-2xl max-h-full">
             <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
               <!-- Modal header -->
               <!-- Modal body -->
               <!-- Modal footer -->
             </div>
           </div>
         </div>
         ```
         - Action buttons (`<Button>`)
         ```html
         <button
           type="button"
           class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
         >
           Download
         </button>
         ```
     - Resource Details:
       - Metadata display and editing
       - Usage statistics
       - Version history
       - Used components:
         - Cards (`<Card>`)
         ```html
         <div
           class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700"
         >
           <h5
             class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white"
           >
             Resource Details
           </h5>
           <!-- Card content -->
         </div>
         ```
         - Forms (`<Form>`)
         - Tabs (`<Tabs>`)
         - Badges (`<Badge>`)
   - API Endpoints:
     - Resource Management:
       - `GET /api/v1/web/resources`: List all resources with filtering
       - `POST /api/v1/web/resources`: Upload new resource
       - `GET /api/v1/web/resources/{id}`: Get resource details
       - `PUT /api/v1/web/resources/{id}`: Update resource metadata
       - `DELETE /api/v1/web/resources/{id}`: Delete resource
       - `POST /api/v1/web/resources/{id}/verify`: Verify resource checksum
     - Resource Access:
       - `GET /api/v1/web/resources/{id}/download`: Get download URL
       - `GET /api/v1/web/resources/{id}/preview`: Get file preview
       - `GET /api/v1/web/resources/{id}/stats`: Get usage statistics
     - Resource Tags:
       - `GET /api/v1/web/resources/tags`: List all tags
       - `POST /api/v1/web/resources/{id}/tags`: Add tags to resource
       - `DELETE /api/v1/web/resources/{id}/tags/{tag}`: Remove tag
   - Attack System Integration:
     - Resource Selection:
       - Resources available in attack creation forms
       - Automatic resource validation for attack type
       - Resource dependency checking
     - Resource Distribution:
       - Automatic presigned URL generation for agents
       - Resource caching on agents
       - Resource verification before task start
     - Resource Monitoring:
       - Track resource usage in attacks
       - Resource performance metrics
       - Resource success rate tracking

### Task Distribution

1. **Task Lifecycle**

   - Creation and assignment
   - Progress monitoring
   - Result collection
   - Completion/abandonment

2. **Task Features**
   - Keyspace distribution
   - Progress tracking
   - Real-time status updates
   - Error handling

## Project Structure

```
CipherSwarm/
├── app/
│   ├── api/            # API endpoints
│   ├── core/           # Core application logic
│   ├── db/             # Database configuration
│   ├── models/         # SQLAlchemy models
│   ├── schemas/        # Pydantic schemas
│   └── web/           # Web routes and templates
├── alembic/           # Database migrations
├── static/            # Static assets
├── templates/         # HTML templates
├── docker/            # Docker configuration files
│   ├── app/           # FastAPI application Dockerfile and configs
│   ├── nginx/         # Nginx reverse proxy configs
│   └── scripts/       # Docker helper scripts
├── docker-compose.yml # Main compose file
├── docker-compose.dev.yml # Development overrides
└── docker-compose.prod.yml # Production overrides
```

## Containerization Requirements

### Docker Configuration

1. **Service Containers**

   - FastAPI Application:
     - Python 3.13 base image
     - uv package manager
     - Development and production configurations
     - Health checks
     - Graceful shutdown handling
   - PostgreSQL Database:
     - Version 16 or later
     - Persistent volume mounts
     - Automated backups
     - Replication support (optional)
   - Redis Cache:
     - Latest stable version
     - Session storage
     - Rate limiting
     - Task queue backend
   - MinIO Object Storage:
     - Latest stable version
     - Configured buckets for attack resources
     - TLS/SSL support
     - Access key management
   - Nginx Reverse Proxy:
     - Latest stable version
     - SSL termination
     - Rate limiting
     - Static file serving
   - Monitoring Stack (Optional):
     - Prometheus
     - Grafana
     - Node exporter
     - Cadvisor

2. **Development Setup**

   ```yaml
   # docker-compose.dev.yml
   version: "3.8"
   services:
     app:
       build:
         context: .
         dockerfile: docker/app/Dockerfile.dev
       volumes:
         - .:/app
       environment:
         - ENVIRONMENT=development
         - DEBUG=1
       ports:
         - "8000:8000"
       depends_on:
         - db
         - redis
         - minio

     db:
       image: postgres:16-alpine
       environment:
         - POSTGRES_USER=cipherswarm
         - POSTGRES_PASSWORD=development
         - POSTGRES_DB=cipherswarm_dev
       volumes:
         - postgres_data:/var/lib/postgresql/data
       ports:
         - "5432:5432"

     redis:
       image: redis:alpine
       ports:
         - "6379:6379"
       volumes:
         - redis_data:/data

     minio:
       image: minio/minio
       ports:
         - "9000:9000"
         - "9001:9001"
       volumes:
         - minio_data:/data
       environment:
         - MINIO_ROOT_USER=minioadmin
         - MINIO_ROOT_PASSWORD=minioadmin
       command: server /data --console-address ":9001"

   volumes:
     postgres_data:
     redis_data:
     minio_data:
   ```

3. **Production Setup**

   ```yaml
   # docker-compose.prod.yml
   version: "3.8"
   services:
     app:
       build:
         context: .
         dockerfile: docker/app/Dockerfile.prod
       restart: unless-stopped
       environment:
         - ENVIRONMENT=production
       depends_on:
         - db
         - redis
         - minio

     nginx:
       build:
         context: ./docker/nginx
         dockerfile: Dockerfile
       ports:
         - "80:80"
         - "443:443"
       volumes:
         - ./static:/usr/share/nginx/html/static
         - ./certs:/etc/nginx/certs
       depends_on:
         - app

     db:
       image: postgres:16-alpine
       restart: unless-stopped
       environment:
         - POSTGRES_USER=${DB_USER}
         - POSTGRES_PASSWORD=${DB_PASSWORD}
         - POSTGRES_DB=${DB_NAME}
       volumes:
         - postgres_data:/var/lib/postgresql/data
         - ./docker/postgres/backup:/backup

     redis:
       image: redis:alpine
       restart: unless-stopped
       command: redis-server --requirepass ${REDIS_PASSWORD}
       volumes:
         - redis_data:/data

     minio:
       image: minio/minio
       restart: unless-stopped
       volumes:
         - minio_data:/data
       environment:
         - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
         - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
       command: server /data --console-address ":9001"

   volumes:
     postgres_data:
     redis_data:
     minio_data:
   ```

4. **Container Security**

   - Non-root users in all containers
   - Read-only root filesystem where possible
   - Limited container capabilities
   - Resource limits and quotas
   - Regular security scanning
   - Secrets management via environment files

5. **Deployment Requirements**

   - Single command deployment: `docker compose up -d`
   - Automated database migrations
   - Health check monitoring
   - Backup and restore procedures
   - Log aggregation
   - Monitoring and alerting
   - Zero-downtime updates
   - Rollback capabilities

6. **Development Workflow**

   - Hot reload for development
   - Shared volume mounts for code changes
   - Development-specific overrides
   - Test environment configuration
   - Debug capabilities
   - Local resource access

7. **CI/CD Integration**

   - Automated builds
   - Container testing
   - Security scanning
   - Registry pushes
   - Deployment automation
   - Environment promotion

8. **Backup Strategy**

   - Database dumps
   - MinIO bucket backups
   - Configuration backups
   - Automated scheduling
   - Retention policies
   - Restore testing

9. **Monitoring Setup**

   - Container metrics
   - Application me - Resource usage
   - Alert configuration
   - Log management
   - Performance tracking

10. **Scaling Configuration**
    - Service replication
    - Load balancing
    - Database clustering
    - Cache distribution
    - Storage expansion
    - Backup scaling

## Development Guidelines

### Logging

All application logging MUST use the @`loguru` logging library. Standard Python `logging` is not permitted.

- Logs should be structured, timestamped, and consistently leveled (`debug`, `info`, `warning`, `error`, `critical`)
- Prefer `logger.bind()` for attaching context (e.g., task ID, agent ID) to log messages
- Ensure logs emit to stdout by default for compatibility with containerized environments
- Avoid manual formatting — use `loguru`'s built-in formatting tools

### Code Organization

1. **API Versioning**

   - Agent API versioning controlled by `swagger.json` specification
   - Web UI and TUI APIs versioned independently
   - Version-specific modules in `api/v1/`
   - Backward compatibility maintenance

2. **Database Practices**

   - Alembic migrations for schema changes
   - SQLAlchemy for database operations
   - Type hints and validation with Pydantic

3. **Security Considerations**
   - JWT token authentication
   - Agent verification
   - Secure resource downloads
   - Air-gapped network support

### Authentication Strategies

1. **Web UI Authentication**

   - OAuth2 with Password flow and refresh tokens
   - Session-based with secure HTTP-only cookies
   - CSRF protection for forms
   - Rate limiting on login attempts
   - Password requirements:
     - Minimum length and complexity
     - Password hashing with Argon2
     - Regular password rotation policies
   - Optional 2FA support using TOTP
   - Remember-me functionality with secure tokens

2. **Agent API Authentication**

   - Bearer token authentication
   - Tokens automatically generated on agent registration
   - One token per agent, bound to agent ID
   - Token rotation on security events
   - Token format: `csa_<agent_id>_<random_string>`
   - Automatic token invalidation on agent removal
   - Rate limiting per agent token
   - Required headers:
     ```
     Authorization: Bearer csa_<agent_id>_<token>
     User-Agent: CipherSwarm-Agent/<version>
     ```

3. **TUI API Authentication**

   - API key-based authentication using bearer tokens
   - Keys generated through web interface
   - Associated with specific user accounts
   - Configurable permissions and scopes
   - Token format: `cst_<user_id>_<random_string>`
   - Multiple active keys per user supported
   - Key management features:
     - Key creation with expiration
     - Scope configuration
     - Usage monitoring
     - Emergency revocation
   - Required headers:
     ```http
     Authorization: Bearer cst_<user_id>_<token>
     User-Agent: CipherSwarm-TUI/<version>
     ```

4. **Common Security Features**
   - All tokens transmitted over HTTPS only
   - Automatic token expiration
   - Token revocation capabilities
   - Audit logging of authentication events
   - Failed attempt monitoring
   - IP-based rate limiting
   - Security event notifications

### 🔁 Caching

CipherSwarm uses [Cashews](mdc:https:/github.com/Krukov/cashews) as the primary caching library for async-compatible TTL caching across internal services and web UI endpoints.

- All caching must use Cashews decorators or `cache.get()` / `cache.set()` API.
- In-memory caching (`mem://`) is used by default in development.
- Production deployments may switch to Redis by configuring `redis://...` during `cache.setup()`.

#### 🔒 Usage Constraints

- Do **not** use other cache mechanisms (e.g., `functools.lru_cache`, FastAPI internal cache) for any persistent/shared value.
- TTLs should be short (≤ 60s) unless a strong reason exists.
- All cache keys should be prefixed logically, e.g. `campaign_stats:`, `agent_health:`, etc.
- Avoid caching large serialized objects unless explicitly required.
- Tagging and `.invalidate()` should be used for cache busting when data dependencies change.
- Prefer decorator usage when possible.

#### 🧠 Examples

```python
from cashews import cache

cache.setup("mem://")  # in memory; use redis://host for production

@cache(ttl="30s")
async def get_campaign_stats():
    ...
```  

For non-decorator use:
```python
stats = await cache.get("campaign_stats")
if not stats:
    stats = await compute_stats()
    await cache.set("campaign_stats", stats, ttl="30s")
```
Note: cache.setup() should run once at app startup (startup_event or ASGI lifespan).


### Best Practices

1. **API Design**

   - RESTful endpoint structure
   - Comprehensive error handling
   - Status code consistency
   - Clear response schemas

2. **Frontend Development**

   - HTMX for dynamic updates
   - Progressive enhancement
   - Responsive design
   - Accessibility compliance

3. **Performance**
   - Asynchronous operations
   - Efficient task distribution
   - Resource monitoring
   - Caching strategies

## Testing and Validation

1. **Testing Levels**

   - Unit tests for core logic
   - Integration tests for API endpoints
   - End-to-end testing for workflows
   - Performance benchmarking

2. **Quality Assurance**
   - Type checking
   - Code linting
   - Documentation coverage
   - Security scanning






