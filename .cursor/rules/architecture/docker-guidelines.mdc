---
description: 
globs: docker/**/*.yml, docker/**/*.Dockerfile, docker-compose*
alwaysApply: false
---
# Docker Configuration Guidelines

## Description
Standards and best practices for Docker configuration in the CipherSwarm project.

## File Glob Patterns
- `**/docker/**/*`
- `**/docker-compose*.yml`
- `**/Dockerfile*`

## Always Apply
true

## Service Containers

### FastAPI Application
- Python 3.13 base image
- uv package manager
- Development and production configurations
- Health checks
- Graceful shutdown handling

### PostgreSQL Database
- Version 16 or later
- Persistent volume mounts
- Automated backups
- Replication support (optional)

### Redis Cache
- Latest stable version
- Session storage
- Rate limiting
- Task queue backend

### MinIO Object Storage
- Latest stable version
- Configured buckets for attack resources
- TLS/SSL support
- Access key management

### Nginx Reverse Proxy
- Latest stable version
- SSL termination
- Rate limiting
- Static file serving

### Monitoring Stack (Optional)
- Prometheus
- Grafana
- Node exporter
- Cadvisor

## Development Setup
```yaml
# docker-compose.dev.yml
version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile.dev
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=development
      - DEBUG=1
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - minio

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=cipherswarm
      - POSTGRES_PASSWORD=development
      - POSTGRES_DB=cipherswarm_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"

volumes:
  postgres_data:
  redis_data:
  minio_data:
```

## Production Setup
```yaml
# docker-compose.prod.yml
version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile.prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
    depends_on:
      - db
      - redis
      - minio

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./static:/usr/share/nginx/html/static
      - ./certs:/etc/nginx/certs
    depends_on:
      - app

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/backup:/backup

  redis:
    image: redis:alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    restart: unless-stopped
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"

volumes:
  postgres_data:
  redis_data:
  minio_data:
```

## Container Security
- Non-root users in all containers
- Read-only root filesystem where possible
- Limited container capabilities
- Resource limits and quotas
- Regular security scanning
- Secrets management via environment files

## Deployment Requirements
- Single command deployment: `docker compose up -d`
- Automated database migrations
- Health check monitoring
- Backup and restore procedures
- Log aggregation
- Monitoring and alerting
- Zero-downtime updates
- Rollback capabilities

## Development Workflow
- Hot reload for development
- Shared volume mounts for code changes
- Development-specific overrides
- Test environment configuration
- Debug capabilities
- Local resource access

## CI/CD Integration
- Automated builds
- Container testing
- Security scanning
- Registry pushes
- Deployment automation
- Environment promotion

## Backup Strategy
- Database dumps
- MinIO bucket backups
- Configuration backups
- Automated scheduling
- Retention policies
- Restore testing

## Monitoring Setup
- Container metrics
- Application metrics
- Resource usage
- Alert configuration
- Log management
- Performance tracking

## Scaling Configuration
- Service replication
- Load balancing
- Database clustering
- Cache distribution
- Storage expansion
- Backup scaling

## References
- [Docker Documentation](mdc:https:/docs.docker.com)
- [Docker Compose Documentation](mdc:https:/docs.docker.com/compose)
- [PostgreSQL Docker Documentation](mdc:https:/hub.docker.com/_/postgres)
- [Redis Docker Documentation](mdc:https:/hub.docker.com/_/redis)
- [MinIO Docker Documentation](mdc:https:/min.io/docs/minio/container)


