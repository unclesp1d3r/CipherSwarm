---
description: Structure and design rules for the main user-facing dashboard view.
globs: 
alwaysApply: false
---

## Dashboard Overview

The dashboard is the primary UI for CipherSwarm users. It provides a high-level view of all campaigns and their current attack status.
As of 2025, the CipherSwarm web UI is implemented using **SvelteKit** with a backend powered by **FastAPI JSON APIs**.

## Structure

- Display a **list of campaigns**, each with:
  - Name, status indicator, and summary stats (e.g., hashes cracked, time started, etc.)
  - Expandable section to view attacks (dictionary, mask, hybrid, etc.)

## Attacks View

Each attack displays:
- A name/label
- Status indicator:
  - ‚úÖ Completed
  - üïí Running (with progress bar or estimated state)
  - ‚è≥ Queued
- A human-readable status line (especially important for incremental/mask attacks)

## UX Notes

- All dashboards are rendered client-side using Svelte components.
- Backend endpoints must return structured JSON (not HTML or Jinja templates).
- Dashboard data should be paginated, filterable, and delivered via `/api/v1/web/...` routes.
- Layouts, tabs, and panels should use Flowbite Svelte and DaisyUI for consistent design.

Real-time updates are handled via WebSocket connections, consumed by Svelte stores.


## Cursor DON'Ts

- Don't preload all attack data on initial page load
- Don't build tables unless needed; prefer stacked visual indicators for clarity

Keep it usable for non-technical users who just want to crack a hash and watch it work.


### Additional UX Guidelines

- Show empty-state placeholders when no campaigns or attacks exist.
- Highlight campaigns with task activity in the last 5 minutes (e.g., background pulse).
- Stack dashboard layout vertically on viewports smaller than 768px width.
