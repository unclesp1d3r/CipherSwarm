---
description: 
globs: app/api/v1/endpoints/web/**/*.py,app/web/**/*.py
alwaysApply: false
---
# FastHX Integration Guidelines for CipherSwarm

## Overview

FastHX is the standard for server-side rendering of HTML and HTMX fragments in CipherSwarm's FastAPI web endpoints. It provides decorators for seamless integration with Jinja2 templates and ensures correct context and response handling for all `/api/v1/web/*` and `app/web` routes.

## Decorator Usage

- Use `@jinja.page("template.html")` for full-page views or any endpoint that should **always** return rendered HTML, regardless of request headers. This is required for modals/fragments that must work for both direct navigation and HTMX requests.
- Use `@jinja.hx("fragment.html")` for endpoints that should only render HTML for **HTMX requests** (i.e., when the `HX-Request` header is present). For non-HTMX requests, the route returns the raw data (e.g., JSON or Pydantic model).
- Do **not** use `response_class=HTMLResponse` on routes decorated with FastHX. The decorator handles the response type.
- Do **not** return `TemplateResponse` or manually render templates. Return a Pydantic model only.
- Do **not** include `Response` in the context data returned from FastHX endpoints, that is not used in FastHX.
- Do **not** use `Any` in the return type of FastHX endpoints.
- Do **not** use `dict[str, Any]` for the return type of FastHX endpoints, return proper Pydantic models instead.

## Context Handling

- Do **not** include `"request": request` in the context dict. FastHX injects the request object automatically into the template context.
- All other context variables should be included as needed for the template.

## Response Types

- FastHX expects the route to return a Pydantic model, list, or object (not a dict). It will inject this as a variable (usually `data`) into the template context.
- If `response_class=HTMLResponse` is specified, FastAPI will attempt to encode the dict as HTML, resulting in an error.

## Modal/Fragment Endpoints

- Use `@jinja.page` for modal or fragment endpoints that must work for both direct navigation (browser) and HTMX requests. This ensures the endpoint always returns HTML, which is required for E2E tests and direct access.
- Use `@jinja.hx` only if the endpoint should return HTML **exclusively** for HTMX requests and raw data otherwise.

## Common Pitfalls

- **Serialization Errors:** Including non-serializable objects (like `Request`) in the context dict will cause Pydantic serialization errors.
- **Encoding Errors:** Specifying `response_class=HTMLResponse` with a dict return value will cause an `AttributeError: 'dict' object has no attribute 'encode'`.
- **Manual TemplateResponse:** Returning `TemplateResponse` bypasses FastHX and breaks context injection and HTMX handling.
- **Wrong Decorator:** Using `@jinja.hx` for endpoints that must always return HTML (e.g., modals) will cause JSON to be returned for direct navigation or non-HTMX requests.

## Canonical Example

See [`app/web/routes/dashboard.py`](mdc:app/web/routes/dashboard.py) for a correct FastHX migration:

```python
@router.get("/attacks/editor-modal")
@jinja.page("attacks/editor_modal.html.j2")
async def attack_editor_modal() -> AttackEditorContext:
    return AttackEditorContext()
```

## Template Access

- In Jinja2 templates, access the request object as `request` (injected by FastHX).
- All custom filters should be registered on the shared Jinja2 environment (see `app/web/templates.py`).

## References
- [FastHX Jinja Templating Example](mdc:https:/volfpeter.github.io/fasthx/examples/jinja-templating/#basics)
- [FastHX Core Decorators](mdc:https:/volfpeter.github.io/fasthx/api/core-decorators)
- [CipherSwarm dashboard.py migration](mdc:app/web/routes/dashboard.py)



