---
description: 
globs: templates/**/*
alwaysApply: false
---
# Jinja2 Template Style Guide

## Description
Rules for consistent, readable, and maintainable Jinja2 templates. Based on the [AVD Jinja2 Style Guide](mdc:https:/avd.arista.com/5.4/docs/contribution/style-guide.html) and [FastAPI Jinja2 Templates Guide](mdc:https:/getlazy.ai/post/fastapi-jinja2).

## File Glob Patterns
- `**/*.j2`
- `**/*.jinja2`
- `**/templates/**/*.html`

## Always Apply
true

---

## 1. Syntax & Formatting
1.1. Add a single space inside curly brackets for variables and filters: `{{ variable }}` and `{{ value | filter }}`
1.2. Indent all Jinja2 blocks with four spaces; never use tabs.
1.3. End tags must match the opening tag's indentation.
1.4. Use the `join` filter for list expansion, not inline for-loops.
1.5. Use `~` for string concatenation.
1.6. Use `is`/`is not` for type checks, `==`/`!=` for value checks, and always compare strings in lowercase.

## 2. Naming Conventions
2.1. Use lowercase for all variable names.
2.2. Use underscores for multi-word variables.
2.3. Use plural form for iterables, singular for loop variables.

## 3. Template Structure & Organization
3.1. Store all templates in `/templates`.
3.2. Organize by feature: `base/`, `components/`, `macros/`, `pages/`.
3.3. Use `{% extends "base/base.html" %}` for all page templates.
3.4. Place reusable UI in `components/` and import with `{% include %}`.
3.5. Store macros in `macros/` and import with `{% from ... import ... %}`.
3.6. Use blocks, includes, and macros to keep templates DRY.

## 4. Logic & Data Handling
4.1. Use `is defined` or project plugin for existence checks.
4.2. Use the `default` filter or project plugin for fallback values.
4.3. Add global context (e.g., user, site settings) via context processors or `templates.env.globals.update()`.
4.4. Prefer async data fetching in route handlers, not in templates.
4.5. Keep business logic out of templatesâ€”templates are for presentation only.
4.6. Always pass `request` in context for FastAPI `TemplateResponse`.

## 5. Security & Escaping
5.1. Escape all user-supplied data by default (`{{ variable }}` is safe). Use nh3 for escaping.
5.2. Never use `| safe` on untrusted input.
5.3. Use `| e` for explicit escaping if needed.

## 6. Performance & Caching
6.1. Enable template caching in production: set `auto_reload = False`, increase `cache_size`.
6.2. Use fragment caching for expensive template parts.
6.3. Minify output in production: set `trim_blocks = True`, `lstrip_blocks = True`.

## 7. Error Handling
7.1. Create custom error pages (e.g., `errors/404.html`, `errors/500.html`).
7.2. Use FastAPI exception handlers to render error templates.

---

## Examples

### Good Syntax & Formatting
```jinja2
{% if users is defined %}
    <ul>
    {% for user in users %}
        <li>{{ user.name | e }}</li>
    {% endfor %}
    </ul>
{% endif %}
```

### Template Inheritance
```jinja2
{% extends "base/base.html" %}
{% block content %}
    <h1>Welcome</h1>
{% endblock %}
```

### Macros & Reusable Components
```jinja2
{% from "macros/forms.html" import input, form_errors %}
<form>
    {{ input("email", "Email", type="email", required=true) }}
    {{ form_errors(errors) }}
</form>
```

### Custom Filters (Python)
```python
templates.env.filters["datetime"] = format_datetime
```

### Context Processors (Python)
```python
templates.env.globals.update({"site_name": "MyApp"})
```

### Error Handling (Python)
```python
@app.exception_handler(404)
async def not_found_handler(request, exc):
    return templates.TemplateResponse("errors/404.html", {"request": request}, status_code=404)
```

### Caching & Performance (Python)
```python
if not settings.DEBUG:
    templates.env.auto_reload = False
    templates.env.cache_size = 1000
    templates.env.trim_blocks = True
    templates.env.lstrip_blocks = True
```

---

## References
- [AVD Jinja2 Style Guide](mdc:https:/avd.arista.com/5.4/docs/contribution/style-guide.html)
- [FastAPI Jinja2 Templates Guide](mdc:https:/getlazy.ai/post/fastapi-jinja2)





