---
description: 
globs: **/*.py,**/*.pyi,**/**/*.py
alwaysApply: false
---
# Python Style Guidelines

## Description
Rules and guidelines for maintaining consistent Python code style across the project.

## File Glob Patterns
- `**/*.py`
- `**/*.pyi`

## Always Apply
true

## Formatting Rules

- Use `ruff format` for all Python files
- Line length: 119 characters
- Indentation: 4 spaces
- Use double quotes (`"`) for strings
- 2 lines between top-level function/class definitions
- Group imports: stdlib, third-party, local

## Type Hints

- Always use type hints for function parameters and return values
- Use `| None` instead of `Optional[]` for union types
- Use `-> None` for functions that return nothing
- Use `@dataclass` for data-only classes
- Use `Annotated` for field definitions with additional metadata:
  ```python
  # ✅ Good
  from typing import Annotated
  from pydantic import Field

  name: Annotated[str, Field(min_length=1, description="User's full name")]

  # ❌ Avoid
  name: str = Field(..., min_length=1, description="User's full name")
  ```
- Use `Annotated` for complex type hints with constraints:
  ```python
  # ✅ Good
  from typing import Annotated
  from pydantic import Field

  age: Annotated[int, Field(ge=0, le=120)]

  # ❌ Avoid
  age: int = Field(..., ge=0, le=120)
  ```

## Naming Conventions

- Modules/files: `snake_case.py`
- Variables: `snake_case`
- Constants: `ALL_CAPS`
- Classes: `CamelCase`
- Functions: `snake_case()`
- Async functions: `async def snake_case()`

## Best Practices

- Use `pathlib.Path` instead of `os.path`
- Use `logging` instead of `print()`
- Use f-strings instead of `%` or `.format()`
- Use context managers (`with` statements)
- Use specific exceptions, not catch-all `except:`
- Avoid global mutable state
- Use dependency injection for testability
- When using Pydantic objects, alway use v2 conventions

## Testing

- Use `pytest` for all tests
- Use `pytest-cov` for coverage
- Use `mypy` for static type checking
- User `just` for all DevOps task running; see [justfile](mdc:justfile)
- Avoid hard-coded paths/secrets in tests

## Anti-Patterns to Avoid

- Catch-all exceptions
- Mixing tabs and spaces
- Global mutable state
- Using `print()` in production code
- Manual JSON serialization
- Hungarian notation (e.g., `strName`, `iCount`)




