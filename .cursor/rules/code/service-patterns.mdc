---
description: 
globs: app/core/**/*.py,app/api/**/*.py,app/api/v1/endpoints/**/*.py
alwaysApply: false
---
## Layered Architecture

All business logic must live in services. These should:

- Contain reusable methods (e.g., `assign_agent_to_session()`)
- Take Pydantic data models, interact with SQLAlchemy models, and return data models (Pydantic)
- Be invoked by API routes or background jobs
- The methods should aspire to be reusable when possible

## Guidelines for Cursor

- NEVER place DB logic in FastAPI route handlers.
- Each route should call a `service/*` method with relevant input.
- Service methods should be unit-testable and accept explicit arguments.

### Additional Guidelines for Cursor

- Service methods must return validated Pydantic `*Out` schemas, not raw DB models.
- Handle all task/agent/session mutations here â€” no side effects in route handlers.
