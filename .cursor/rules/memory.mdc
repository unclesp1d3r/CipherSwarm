---
description:
globs:
alwaysApply: true
---
# AI Memory Bank Management

## Purpose
Records and retrieves project-specific knowledge, workarounds, and established patterns.

## Memory Entry Format

### Required Structure
```markdown
### {Title} - {Category}
- **Issue:** {Description of the issue or learning}
- **Solution:** {Implementation details or workaround}
- **Date:** {YYYY-MM-DD}
- **References:** {Related issues, PRs, or documentation}
```

## Memory Categories

- Library Workarounds
- Configuration Quirks
- API Usage Patterns
- Performance Optimizations
- Security Considerations
- Testing Patterns

## Examples

```ruby
# ✅ Good - Recording a configuration quirk
# Configuration quirk: Redis connection requires manual reconnect after failover
def handle_redis_failover
  Redis.current.reconnect
end

# ✅ Good - Documenting a performance pattern
# NOTE: Always use bulk insert for large datasets to prevent N+1 queries
def bulk_import(records)
  Model.insert_all(records)
end

# ❌ Bad - Missing context and documentation
def reconnect_db
  DB.reconnect # Why? When? What triggers this?
end
```

## Memory Management Rules

1. **Recording New Learnings**
   - Document all non-obvious workarounds
   - Include context and reasoning
   - Reference related issues or PRs
   - Add date for tracking

2. **Consulting Existing Knowledge**
   - Check memory bank before implementation
   - Apply known patterns consistently
   - Update outdated entries
   - Cross-reference related entries

@file AI_MEMORY.md
@file docs/CONTRIBUTING.md

<rule>
name: record_learning_to_memory
description: Upon identifying a significant project-specific learning, workaround, configuration detail, or established convention not obvious from general docs, add it to AI_MEMORY.md.
filters:
  - type: intent
    pattern: "(project_learning|workaround_discovered|config_quirk|established_pattern)"
actions:
  - type: suggest
    implementation:
      - check_existing: "Check if similar entry exists in AI_MEMORY.md"
      - format_entry: |
          Create entry in format:
          ### {Title} - {Category}
          - **Issue:** {Description of the issue or learning}
          - **Solution/Pattern:** {Implementation details or workaround}
          - **Date:** {YYYY-MM-DD}
          - **References:** {Related issues, PRs, or documentation}
      - add_entry: "Add formatted entry to appropriate section in AI_MEMORY.md"
    message: |
      Identified a learning opportunity. Please add a concise entry to `@AI_MEMORY.md` under an appropriate heading (e.g., ## Library Workarounds, ## Deployment Quirks, ## API Usage Patterns).
      Example entry format:
      ```markdown
      ### Library X Bug - Cache Invalidation
      - **Issue:** Library X v1.2 has a bug where its internal cache isn't invalidated correctly after operation Y.
      - **Workaround:** Must manually call `LibraryX.clearCache('key_pattern')` after performing operation Y. See #issue-123.
      - **Date:** 2024-07-26
      ```
</rule>

<rule>
name: consult_memory_bank
description: At the start of analyzing a task, consult @AI_MEMORY.md for any relevant stored knowledge that might impact the implementation.
filters:
  - type: event
    pattern: "task_analysis_start"
actions:
  - type: suggest
    implementation:
      - scan_memory: "Scan AI_MEMORY.md for relevant entries"
      - apply_knowledge: "Apply found knowledge to current task"
      - notify_conflicts: "Alert if conflicting patterns are found"
    message: "Consulting `@AI_MEMORY.md`. Please factor any relevant entries into your plan and implementation."
</rule>



