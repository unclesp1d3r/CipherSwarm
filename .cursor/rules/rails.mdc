---
description:
globs:
alwaysApply: true
---
# CipherSwarm Development Guidelines

## 1. Project Structure and Organization

### Directory Structure Standards
- Keep all business logic in `app/models/` and `app/services/`
- Place all API endpoints in `app/controllers/api/v1/`
- Store view components in `app/components/`
- Use `app/validators/` for custom validations
- Keep all background jobs in `app/jobs/`

### Code Organization
- Follow Single Responsibility Principle
- Use service objects for complex business logic
- Keep controllers skinny and focused
- Use concerns for shared functionality
- Follow Rails conventions

## 2. Development Standards

### Testing Requirements
- Write comprehensive RSpec tests
- Use FactoryBot factories instead of fixtures
- Test both happy and edge cases
- Keep tests DRY but readable
- Use parallel testing by default
- Implement security testing
- Use `rspec_junit_formatter` for CI/CD

### Security Standards
- Use `params.permit()` for strong parameters
- Implement proper authorization with CanCanCan
- Follow OWASP guidelines
- Configure rate limiting
- Keep dependencies updated
- Use secure communication (HTTPS)
- Regular security audits with Brakeman

### Performance Guidelines
- Use `ar_lazy_preload` for N+1 query prevention
- Implement proper caching strategies
- Configure connection pooling
- Use Sidekiq for background jobs
- Monitor application metrics
- Regular performance profiling
- Optimize database queries
- Use proper indexing strategies

### View Components
- Use ViewComponent for reusable UI elements
- Keep components small and focused
- Follow the component directory structure in `app/components/`
- Use proper naming conventions
- Implement proper testing for components

## 3. Tech Stack Requirements

### Backend
- Ruby 3.3.6; use rbenv
- Rails 7.2+
- PostgreSQL database
- Redis for caching and Sidekiq
- AWS S3 for file storage
- Docker for deployment; see [docker-compose-production.yml](mdc:docker-compose-production.yml) and [Dockerfile](mdc:Dockerfile)

### Frontend
- Hotwire (Turbo + Stimulus)
- CSS bundling with cssbundling-rails
- JS bundling with jsbundling-rails
- ViewComponent for UI components

### Authentication & Authorization
- Devise for authentication
- CanCanCan for authorization
- Rolify for role management
- Audited for model auditing

### Background Processing
- Sidekiq for async jobs
- Sidekiq-Cron for scheduled tasks
- SidekiqAlive for health checks

## 4. Code Quality Standards

### Linting and Formatting
- Use RuboCop with Rails Omakase configuration
- ERB Lint for template formatting
- Prettier for JavaScript
- Use `rufo` for Ruby formatting

### Documentation
- Document all public methods
- Use Swagger/RSwag for API documentation
- Keep README updated
- Use proper YARD documentation syntax

### Monitoring and Logging
- Configure proper log levels
- Use structured logging
- Monitor performance metrics
- Track error rates and patterns
- Use Bullet in development for N+1 detection

## 5. Development Workflow

### Git Practices
- Follow conventional commits
- Keep PRs focused and small
- Write descriptive commit messages
- Use feature branches
- Regular rebasing with main

### Environment Setup
- Use `bin/dev` to start the server
- Use rbenv to setup the ruby environment
- Check logs after every significant change
- Monitor development.log
- **Always** use the built in Rails tools, such as the rails generators. NEVER create migrations manually.
- Use Docker for development
- Keep development environment in sync with production

### Deployment
- Use proper staging environment
- Implement blue-green deployments
- Configure proper health checks
- Set up monitoring and alerts
- Use proper environment variables

## 6. API Development

### REST API Standards
- Use proper HTTP verbs
- Implement versioning (v1)
- Use proper status codes
- Implement rate limiting
- Document with RSwag
- Follow JSON:API specification

### OpenAPI Documentation Standards
- Use `rswag-specs` for generating OpenAPI documentation
- Write integration tests that generate Swagger documentation
- Follow the pattern: `describe 'API V1' do; path '/api/v1/resource' do; end; end`
- Document all request parameters using `parameter` blocks
- Include response schemas using `response` blocks
- Use shared examples for common response patterns
- Keep swagger helper configuration up to date
- Run `rails rswag:specs:swaggerize` after API changes
- Document security requirements for each endpoint
- Include meaningful examples in documentation
- Use proper response codes (200, 201, 204, 400, 401, 403, 404, 422, 500)
- Document error responses with proper schemas
- Keep API versioning consistent in documentation
- Use tags to group related endpoints
- Include proper descriptions for all operations
- Document all possible response types
- Enable strict schema validation with `config.openapi_strict_schema_validation = true`
- Generate documentation in `swagger/v1` directory
- Maintain OpenAPI 3.0.1 specification compliance

### Swagger Documentation Structure
- Organize endpoints by resource type
- Use consistent naming conventions
- Include detailed parameter descriptions
- Document authentication methods
- Specify content types for requests/responses
- Include rate limiting information
- Document pagination patterns
- Use proper schema references
- Include enum values in documentation
- Document deprecated endpoints appropriately

### Retry Mechanism Documentation
- Document retry strategies using `x-speakeasy-retries` extension
- Specify backoff configuration:
  - Initial interval: 500ms
  - Maximum interval: 60 seconds
  - Maximum elapsed time: 1 hour
  - Exponential backoff factor: 1.5
- Document retry status codes (5XX, 429)
- Include connection error retry behavior
- Document retry limits and timeouts
- Specify which endpoints support retries
- Include retry behavior in error handling documentation

### Schema Validation and Components
- Use strict schema validation for all endpoints
- Define reusable components in `swagger_helper.rb`
- Document common schema patterns:
  - Error responses
  - Pagination metadata
  - Resource representations
- Use proper schema references with `$ref`
- Include all required fields in schemas
- Document nullable fields appropriately
- Use proper data types and formats
- Include field descriptions and examples
- Document enum values and constraints
- Version schemas alongside API versions

### API Testing and Documentation
- Write comprehensive request specs that generate documentation
- Include examples for all response scenarios
- Test and document error conditions
- Validate response schemas in tests
- Use shared examples for common patterns
- Document authentication requirements
- Include rate limiting headers in examples
- Test and document pagination
- Validate request parameters
- Document state transitions and side effects

### Environment-Specific Configuration
- Document server configurations for different environments
- Include environment variables in documentation
- Document environment-specific behaviors
- Include development setup instructions
- Document production deployment requirements
- Specify security requirements per environment
- Include rate limiting differences
- Document environment-specific endpoints

### Security Measures
- Implement proper authentication
- Use SSL/TLS
- Implement CORS policies
- Rate limiting
- Input validation
- XSS protection






