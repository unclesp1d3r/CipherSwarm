---
description: 
globs: .git/COMMIT_EDITMSG
alwaysApply: false
---
# Commit Message Style

## Description
Rules and guidelines for maintaining consistent commit message style across the project.

## File Glob Patterns
- `**/*` (applies to all files)

## Always Apply
true

Follow the [Conventional Commits](mdc:https:/www.conventionalcommits.org) specification:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

## Commit Structure

### 1. Type (Required)
The type MUST be one of:
- `feat`: A new feature (MINOR version)
- `fix`: A bug fix (PATCH version)
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `build`: Changes that affect the build system or external dependencies
- `ci`: Changes to CI configuration files and scripts
- `chore`: Changes to the build process or auxiliary tools and libraries

### 2. Scope (Optional)
- MUST be a noun describing a section of the codebase
- MUST be surrounded by parenthesis
- MUST be one of the pre-defined scopes below

#### Pre-defined Scopes for CipherSwarm
- `(auth)`: Authentication and authorization
- `(api)`: API endpoints and routes
- `(cli)`: Command-line interface
- `(models)`: Data models and schemas
- `(docs)`: Documentation
- `(deps)`: Dependencies

### 3. Description (Required)
- MUST immediately follow the colon and space after the type/scope prefix
- MUST be a short summary of the code changes
- MUST use imperative mood ("add" not "added")
- MUST NOT end with a period
- SHOULD be specific and concise; SHOULD under 72 characters
- SHOULD be capitalized
- MAY be followed by an itemized list of changes in the body

### 4. Body (Optional)
- MUST begin one blank line after the description
- SHOULD use itemized lists for multiple changes
- MAY consist of any number of newline separated paragraphs
- SHOULD explain the what and why, not the how
- MAY be longer when detailing multiple changes

### 5. Footer (Optional)
- MUST begin one blank line after the body
- Each footer MUST consist of a word token, followed by either a `:` or `#` separator
- Footer tokens MUST use `-` in place of whitespace characters
- Exception: `BREAKING CHANGE` MAY be used as a token
- Examples:
  ```
  Closes #123
  BREAKING CHANGE: environment variables now take precedence over config files
  ```

## Breaking Changes
Breaking changes MUST be indicated in one of two ways:
1. In the type/scope prefix with a `!` before the `:`
   ```
   feat(api)!: remove deprecated endpoints
   ```
2. As a footer entry:
   ```
   feat(api): add new authentication flow

   BREAKING CHANGE: old authentication endpoints are removed
   ```

## Examples

### Feature with Multiple Changes
```
feat(auth): add OAuth2 support

- Add OAuth2 authentication flow
- Support token refresh
- Add token validation
- Update documentation with OAuth2 setup
- Add OAuth2 configuration options

Closes #123
```

### Bug Fix with Detailed Changes
```
fix(api): handle null values in response

- Add null checks for all response fields
- Set default values for optional fields
- Update error handling for null cases
- Add test cases for null value handling
- Update API documentation

Fixes #456
```

### Documentation Update
```
docs: update README with installation instructions

- Add detailed steps for setting up the development environment
- Include MongoDB setup instructions
- Add troubleshooting section
- Update dependency installation steps
- Add environment variable configuration guide
```

### Breaking Change
```
feat(api)!: remove deprecated endpoints

- Remove /api/v1/old-auth endpoint
- Remove /api/v1/legacy-users endpoint
- Update API documentation
- Add migration guide for affected clients

BREAKING CHANGE: The following endpoints are removed:
- /api/v1/old-auth
- /api/v1/legacy-users
```

## Guidelines
- Use imperative mood ("add" not "added")
- Use itemized lists for multiple changes
- Reference issues in footer
- Use present tense
- Be specific and concise
- Capitalize first word
- No period at the end
- Use `!` for breaking changes in type/scope
- Use `BREAKING CHANGE:` in footer for detailed breaking changes




