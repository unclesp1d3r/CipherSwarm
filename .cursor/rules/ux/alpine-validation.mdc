---
description: 
globs: templates/**/*.html.j2
alwaysApply: false
---
## Rule: Alpine.js for Real-Time Form Feedback

Use Alpine.js to manage client-side validation errors in forms.

- Use `x-model` to bind input values to local state.
- Use `x-show` or conditional `:class` to display error messages or highlight fields based on that state.
- Prefer `@submit.prevent="..."` for client-side validation, fallback to HTMX POST if valid.
- Do **not** rely on JavaScript event listeners or show/hide error fields manually.
- Use `x-transition` or conditional class bindings to animate error display.

### Example

```html
<form
  x-data="{ name: '', error: '' }"
  @submit.prevent="error = name ? '' : 'Name is required'"
>
  <input
    x-model="name"
    type="text"
    placeholder="Agent Name"
    :class="{ 'border-red-500': error }"
  />
  <p x-show="error" class="text-red-500 text-sm mt-1" x-text="error"></p>
  <button type="submit">Save</button>
</form>
```

