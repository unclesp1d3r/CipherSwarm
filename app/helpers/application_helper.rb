module ApplicationHelper
  include Pagy::Frontend

  # Returns the current URL of the request.
  #
  # @return [String] The current URL.
  def current_url
    "#{request.protocol}#{request.host_with_port}#{request.fullpath}"
  end

  # Returns the name of the current site.
  #
  # The current site name is derived from the name of the parent module of the Rails application,
  # converted to a human-readable format with capitalized words.
  #
  # Example:
  #   current_site #=> "Cipher Swarm"
  #
  # Returns a string representing the current site name.
  def current_site
    Rails.application.class.module_parent.name
         .underscore
         .humanize
         .split
         .map(&:capitalize)
         .join(" ")
  end

  # Returns the current title for the page.
  # The title is determined based on the current site, the content_for(:title) if present,
  # or the last part of the params[:controller] titleized.
  # Returns a string with the current title.
  def current_title
    title = []
    title << current_site
    if content_for?(:title)
      title << content_for(:title)
    else
      title << params[:controller].split("/").last.titleize
    end
    title.uniq.join(" | ")
  end

  # Sets the title of the page based on the given elements.
  #
  # @param elements [Array] The elements to be used in the title.
  # @return [String] The generated title string.
  def title(elements = [])
    content_for :title, elements.to_a.compact.map { |a| a.try(:name) || a.try(:title) || a.try(:id) || a.to_s.capitalize }.join(" | ")
  end

  # Sets the description for the current page.
  #
  # @param description [String] The description to be set.
  # @return [void]
  def description(description = "")
    content_for :description, description
  end

  # Sanitizes the given content by removing any potentially harmful HTML tags.
  #
  # Parameters:
  # - content: The content to be sanitized.
  #
  # Returns:
  # The sanitized content.
  def sanitize(content)
    ActionController::Base.helpers.sanitize(content)
  end

  # Removes HTML tags and entities from a given string.
  #
  # Parameters:
  # - string: The string to be processed.
  #
  # Returns:
  # The processed string with HTML tags and entities removed.
  def strip_tags_and_entities(string)
    if string.present?
      stripped = strip_tags(string)
      decoded = HTMLEntities.new.decode(stripped)
      decoded.squish.gsub(%r{/</?[^>]*>/}, "")
    end
  end

  # Checks if a route exists for the given path.
  #
  # @param path [String] The path to check.
  # @return [Boolean] Returns true if the route exists, false otherwise.
  def route_exists?(path)
    begin
      recognize_path = Rails.application.routes.recognize_path(path, method: :get)
      recognize_path.present? && recognize_path[:action] != "route_not_found"
    rescue StandardError
      false
    end
  end

  # Returns the content for the given name if it exists, otherwise returns the default value.
  #
  # @param name [Symbol] The name of the content block.
  # @param default [String] The default value to return if the content block does not exist.
  # @return [String] The content for the given name if it exists, otherwise the default value.
  def content_for_or(name, default)
    if content_for?(name)
      content_for(name)
    else
      default
    end
  end

  # Returns the CSS class for the body element based on the current controller and action.
  # The CSS class is generated by combining the controller and action names, separated by hyphens.
  # If the controller name contains a slash ("/"), it is split and only the first part is used.
  # If the action name is present, it is appended to the controller name.
  # If the "page" parameter is present, it is appended to the controller and action names.
  #
  # @param params [Hash] The parameters hash containing the current controller, action, and page.
  # @return [String] The CSS class for the body element.
  def body_class(params)
    body = []
    return unless params[:controller]
    if params[:controller].include?("/")
      body << params[:controller].split("/").first
      body << params[:controller].gsub("/", "-")
    else
      body << params[:controller]
    end
    if params[:controller].include?("/")
      body << "#{params[:controller].gsub('/', '-')}-#{params[:action]}"
    else
      body << "#{params[:controller]}-#{params[:action]}"
    end
    if params.key?(:page)
      body << "#{params[:controller]}-#{params[:action]}-#{params[:page]}"
    end
    body.join(" ")
  end

  # Generates a sidebar link with the specified name, path, and icon.
  #
  # @param name [String] The name of the link.
  # @param path [String] The path of the link.
  # @param icon [String, nil] The icon to display before the link name, or nil if no icon is needed.
  # @return [String] The HTML code for the sidebar link.
  def sidebar_link(name, path, icon)
    class_name = current_page?(path) ? "active" : ""
    content_tag :li, class: "nav-item" do
      link_to path, class: "nav-link #{class_name}" do
        if not icon.nil?
          icon(icon) + name
        else
          name
        end
      end
    end
  end
end
