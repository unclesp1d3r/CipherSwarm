[project]
name = "cipherswarm"
version = "0.1.0"
description = "A distributed password cracking management system"
authors = [{ name = "UncleSp1d3r", email = "unclespider@pm.me" }]
requires-python = ">=3.13"
dependencies = [
    "fastapi[all]>=0.115.12",
    "uvicorn[standard]>=0.27.1",
    "sqlalchemy>=2.0.27",
    "alembic~=1.16.1",
    "pydantic~=2.11.4",
    "pydantic-settings>=2.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.9",
    "celery>=5.3.6",
    "redis>=5.0.1",
    "httpx[http2,brotli,zstd]~=0.28.1",
    "python-dotenv>=1.0.1",
    "email-validator>=2.1.0.post1",
    "loguru>=0.7.3",
    "casbin>=1.41.0",
    "pyjwt>=2.10.1",
    "bcrypt>=4.0.1",
    "cashews[redis,dill]>=7.4.0",
    "packaging>=25.0",
    "timeago>=1.0.16",
    "name-that-hash>=1.11.0",
    "psycopg[binary,pool]>=3.1.18",
    "typing-extensions>=4.13.2",
    "nh3>=0.2.21",
    "minio>=7.2.15",
    "fastapi-csrf-protect>=1.0.3",
    "case-converter>=1.2.0",
    "fastapi-problem>=0.11.4",
    "starlette>=0.46.2",
    "cryptography>=45.0.6",
    "greenlet>=3.2.4",
]

[dependency-groups]
ci = [
    "mdformat-config>=0.2.1",
    "mdformat-footnote>=0.1.1",
    "mdformat-frontmatter>=2.0.8",
    "mdformat-gfm>=0.4.1",
    "mdformat-gfm-alerts>=2.0.0",
    "mdformat-mkdocs>=4.4.0",
    "mdformat-ruff>=0.1.3",
    "mdformat-simple-breaks>=0.0.1",
    "mdformat-tables>=1.0.0",
    "mdformat-toc>=0.3.0",
    "mdformat-web>=0.2.0",
    "mdformat-wikilink>=0.2.0",
    "mdformat>=0.7.22",
]
dev = [
    "pre-commit>=4.2.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=1.1.0",
    "black>=24.1.1",
    "ruff>=0.2.1",
    "mypy>=1.8.0",
    "polyfactory>=2.21.0",
    "types-passlib>=1.7.7.20250408",
    "types-python-jose>=3.4.0.20250224",
    "testcontainers[postgres,minio]>=4.1.1",
    "deptry>=0.23.0",
    "jsonschema>=4.25.0",
]
docs = [
    "griffe-pydantic>=1.1.4",
    "griffe-typingdoc>=0.2.8",
    "mkdocs>=1.6.1",
    "mkdocs-awesome-pages-plugin>=2.10.1",
    "mkdocs-exporter>=6.2.0",
    "mkdocs-git-committers-plugin-2>=2.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-macros-plugin>=1.3.7",
    "mkdocs-material>=9.6.15",
    "mkdocs-mermaid2-plugin>=1.2.1",
    "mkdocs-minify-plugin>=0.8.0",
    "mkdocs-redirects>=1.2.2",
    "mkdocs-schema-reader>=0.11.1",
    "mkdocstrings[python]>=0.29.1",
    "pydantic-2-mermaid>=0.7.3",
]

[project.scripts]
server = "app.main:run_server"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.ruff]
indent-width = 4
target-version = "py313"
line-length = 88
fix = true
include = [
    "pyproject.toml",
    "**/src/**/*.py",
    "scripts/**/*.py",
    "tests/**/*.py",
    "packages/**/*.py",
]
exclude = [
    ".git",
    ".basedpyright_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "alembic/versions/*",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 20

[tool.ruff.lint]
select = [
    "ALL", # include all the rules, including new ones
]
ignore = [
    "B008",    # doesn't play well with FastAPI DI
    "COM812",  # Runs counter to Ruff formatting rules
    "C901",    # ignore complex code
    "D100",    # ignore missing docs
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D203",
    "D205",
    "D212",
    "D400",
    "D401",
    "D415",
    "E402",    # false positives for local imports
    "E501",    # line too long
    "EM102",   # Stupid error that doesn't make sense
    "EM101",   # Stupid error that doesn't make sense
    "FBT001",  # Stupid rule that doesn't make sense
    "FBT002",  # Stupid rule that doesn't make sense
    "FBT003",  # Stupid rule that doesn't make sense
    "G004",    # I don't care about this rule
    "TRY003",  # external messages in exceptions are too verbose
    "TC001",
    "TC002",   # too many false positives from my own code
    "TC003",
    "TD002",
    "TD003",
    "TRY301",  # Not sure why this is an error
    "PLR0912", # too many arguments is sometimes fine
    "PLR0913", # too many arguments is sometimes fine
    "PLR0915", # too many arguments is sometimes fine
    "PLC0415", # We'll fix this later
    "FIX002",  # Temporary ignore for ruff while I'm still implementing the changes
    "ERA001",  # Temporary ignore for ruff while I'm still implementing the changes
]
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D",
    "S",
    "PT011",
    "ARG001",
    "ARG002",  # Unused method arguments (common in pytest fixtures)
    "SLF001",
    "ANN401",
    "ANN001",  # Missing type annotation for function argument
    "ANN202",  # Missing return type annotation for private function
    "T201",
    "PLR2004", #  doesn't much matter for tests
    "B007",    # Loop control variable not used within loop body
]
"alembic/versions/**/*.py" = ["D"]
"tests/conftest.py" = ["ARG001", "SLF001", "ANN401"]
"tests/db/test_session.py" = ["SLF001"]
"scripts/dev/**/*.py" = ["T201"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
exclude = '^(\\.venv|build|dist|alembic)/'
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true


[tool.basedpyright]
pythonVersion = "3.13"
typeCheckingMode = "recommended"
pythonPlatform = "any"
ignore = ["tests/**"]
allowedUntypedLibraries = ["alembic", "fastapi", "pydantic"]
reportUnannotatedClassAttribute = "hint"
reportImplicitOverride = "warning"
reportUnknownMemberType = "hint"
reportUnknownVariableType = "hint"
reportUnknownArgumentType = "hint"
reportUnknownParameterType = "hint"
reportUnsafeMultipleInheritance = "warning"
reportExplicitAny = false
reportAny = "hint"
reportUnusedCallResult = "hint"
reportUninitializedInstanceVariable = "warning"
reportMissingTypeArgument = "hint"
reportDeprecated = "warning"
reportMissingTypeStubs = false
reportPrivateLocalImportUsage = "warning"
reportCallIssue = "hint"


[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver"
version_provider = "uv"
update_changelog_on_bump = true
major_version_zero = true
changelog_file = "CHANGELOG.md"
changelog_merge_prerelease = true
