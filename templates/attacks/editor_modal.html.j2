<!-- Attack Editor Modal -->
<div class="fixed z-10 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true"
    x-data="attackEditor()" data-mask-lines='{{ attack.masks_inline|tojson|e if attack and attack.masks_inline else '
    ["" ]' }}' data-wordlist-inline='{{ attack.wordlist_inline|tojson|e if attack and attack.wordlist_inline else ' [""
    ]' }}'>
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <div
            class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <form id="attack-editor-form" hx-post="/api/v1/web/attacks/estimate"
                hx-trigger="change from:input, keyup delay:300ms from:input, submit"
                hx-target="#attack-estimate-fragment" hx-swap="outerHTML"
                class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            {{ 'Edit' if attack else 'New' }} Attack
                        </h3>
                        <div class="mt-2 space-y-4">
                            <div>
                                <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                                <input type="text" name="name" id="name"
                                    class="mt-1 block w-full border-gray-300 rounded-md"
                                    value="{{ attack.name if attack else '' }}" required>
                                {# Field-level error for 'name' #}
                                {% if errors %}
                                {% for error in errors if error.loc and error.loc[0] == 'name' %}
                                <p class="text-red-600 text-sm mt-1">{{ error.msg }}</p>
                                {% endfor %}
                                {% endif %}
                            </div>
                            <div>
                                <label for="attack_mode" class="block text-sm font-medium text-gray-700">Attack
                                    Mode</label>
                                <select name="attack_mode" id="attack_mode"
                                    class="mt-1 block w-full border-gray-300 rounded-md" required x-model="attackMode">
                                    <option value="dictionary" {% if attack and attack.attack_mode=='dictionary'
                                        %}selected{% endif %}>Dictionary</option>
                                    <option value="mask" {% if attack and attack.attack_mode=='mask' %}selected{% endif
                                        %}>Mask</option>
                                    <option value="brute_force" {% if attack and attack.attack_mode=='brute_force'
                                        %}selected{% endif %}>Brute Force</option>
                                </select>
                                {# Field-level error for 'attack_mode' #}
                                {% if errors %}
                                {% for error in errors if error.loc and error.loc[0] == 'attack_mode' %}
                                <p class="text-red-600 text-sm mt-1">{{ error.msg }}</p>
                                {% endfor %}
                                {% endif %}
                            </div>
                            <div id="mask-list-section" x-show="attackMode === 'mask'">
                                <label class="block text-sm font-medium text-gray-700">Masks</label>
                                <div id="mask-lines-list">
                                    <template x-for="(mask, idx) in maskLines" :key="idx">
                                        <div class="flex items-center mb-2">
                                            <input type="text" :name="'masks_inline[]'"
                                                class="mt-1 block w-full border-gray-300 rounded-md"
                                                x-model="maskLines[idx]">
                                            <button type="button" class="ml-2 text-red-600 remove-mask-line"
                                                @click="removeMaskLine(idx)">&times;</button>
                                        </div>
                                    </template>
                                </div>
                                <button type="button" class="mt-2 text-blue-600 add-mask-line" @click="addMaskLine()">+
                                    Add Mask</button>
                            </div>
                            <div id="single-mask-section" x-show="attackMode !== 'mask'">
                                <label for="mask" class="block text-sm font-medium text-gray-700">Mask</label>
                                <input type="text" name="mask" id="mask"
                                    class="mt-1 block w-full border-gray-300 rounded-md"
                                    value="{{ attack.mask if attack else '' }}">
                                {# Field-level error for 'mask' #}
                                {% if errors %}
                                {% for error in errors if error.loc and error.loc[0] == 'mask' %}
                                <p class="text-red-600 text-sm mt-1">{{ error.msg }}</p>
                                {% endfor %}
                                {% endif %}
                            </div>
                            <div id="dictionary-wordlist-section" x-show="attackMode === 'dictionary'">
                                <label class="block text-sm font-medium text-gray-700">Wordlist Source</label>
                                <div class="flex items-center gap-4 mb-2">
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="wordlist_source" value="existing" class="form-radio"
                                            x-model="wordlistSource" id="wordlist_source_existing">
                                        <span class="ml-2">Existing Wordlist</span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="wordlist_source" value="previous_passwords"
                                            class="form-radio" x-model="wordlistSource"
                                            id="wordlist_source_previous_passwords">
                                        <span class="ml-2">Previous Passwords</span>
                                    </label>
                                </div>
                                <div id="existing-wordlist-dropdown" x-show="wordlistSource === 'existing'">
                                    <label class="block text-sm font-medium text-gray-700">Wordlist</label>
                                    <div hx-get="/api/v1/web/resources/wordlists" hx-trigger="load"
                                        hx-target="#existing-wordlist-dropdown" hx-swap="innerHTML">
                                        <!-- Wordlist dropdown will be loaded here -->
                                    </div>
                                    <!-- Ephemeral wordlist input for small lists -->
                                    <div id="ephemeral-wordlist-inline" class="mt-4">
                                        <label class="block text-sm font-medium text-gray-700">Ephemeral Wordlist (Add
                                            Words)</label>
                                        <div id="wordlist-inline-list">
                                            <template x-for="(word, idx) in wordlistInline" :key="idx">
                                                <div class="flex items-center mb-2">
                                                    <input type="text" :name="'wordlist_inline[]'"
                                                        class="mt-1 block w-full border-gray-300 rounded-md"
                                                        x-model="wordlistInline[idx]">
                                                    <button type="button" class="ml-2 text-red-600 remove-word-inline"
                                                        @click="removeWordInline(idx)">&times;</button>
                                                </div>
                                            </template>
                                        </div>
                                        <button type="button" class="mt-2 text-blue-600 add-word-inline"
                                            @click="addWordInline()">+ Add Word</button>
                                    </div>
                                </div>
                                <div id="previous-passwords-info" x-show="wordlistSource === 'previous_passwords'">
                                    <div
                                        class="p-2 bg-blue-50 border border-blue-200 rounded text-blue-800 text-sm mb-2">
                                        Uses all previously cracked passwords for this project. No manual wordlist
                                        selection required.
                                    </div>
                                </div>
                                <label class="block text-sm font-medium text-gray-700 mt-4">Rule List (Optional)</label>
                                <div hx-get="/api/v1/web/resources/rulelists" hx-trigger="load"
                                    hx-target="#dictionary-rulelist-section" hx-swap="innerHTML"
                                    id="dictionary-rulelist-section">
                                    <!-- Rule list dropdown will be loaded here -->
                                </div>
                                <div class="mt-2">
                                    <label class="block text-sm font-medium text-gray-700">Modifiers</label>
                                    <div id="modifiers-group" class="flex flex-wrap gap-2">
                                        <button type="button"
                                            class="modifier-btn px-2 py-1 rounded border border-gray-300 bg-gray-100 hover:bg-blue-100"
                                            data-modifier="change_case">+ Change Case</button>
                                        <button type="button"
                                            class="modifier-btn px-2 py-1 rounded border border-gray-300 bg-gray-100 hover:bg-blue-100"
                                            data-modifier="substitute_chars">+ Substitute Characters</button>
                                        <!-- Add more modifier buttons as needed -->
                                    </div>
                                    <input type="hidden" name="modifiers" id="modifiers-input"
                                        value="{{ attack.modifiers|join(',') if attack and attack.modifiers else '' }}">
                                    <!-- TODO: Add JS to toggle button active state and update hidden input value as a comma-separated list -->
                                    {% if attack and attack.left_rule %}
                                    <span class="block text-xs text-gray-400 mt-1">Rule file UUID: {{ attack.left_rule
                                        }}</span>
                                    {% endif %}
                                </div>
                            </div>
                            <div id="dictionary-length-section" x-show="attackMode === 'dictionary'">
                                <label class="block text-sm font-medium text-gray-700">Dictionary Length Range</label>
                                <div class="flex space-x-2">
                                    <div class="flex-1">
                                        <label for="min_length" class="block text-xs text-gray-500">Min Length</label>
                                        <input type="number" name="min_length" id="min_length" min="1" max="128"
                                            class="mt-1 block w-full border-gray-300 rounded-md"
                                            value="{{ attack.min_length if attack and attack.min_length is not none else 1 }}">
                                        {# Field-level error for 'min_length' #}
                                        {% if errors %}
                                        {% for error in errors if error.loc and error.loc[0] == 'min_length' %}
                                        <p class="text-red-600 text-sm mt-1">{{ error.msg }}</p>
                                        {% endfor %}
                                        {% endif %}
                                    </div>
                                    <div class="flex-1">
                                        <label for="max_length" class="block text-xs text-gray-500">Max Length</label>
                                        <input type="number" name="max_length" id="max_length" min="1" max="128"
                                            class="mt-1 block w-full border-gray-300 rounded-md"
                                            value="{{ attack.max_length if attack and attack.max_length is not none else 32 }}">
                                        {# Field-level error for 'max_length' #}
                                        {% if errors %}
                                        {% for error in errors if error.loc and error.loc[0] == 'max_length' %}
                                        <p class="text-red-600 text-sm mt-1">{{ error.msg }}</p>
                                        {% endfor %}
                                        {% endif %}
                                    </div>
                                </div>
                                <!-- TODO: In the future, set min/max defaults based on hash_type if available -->
                            </div>
                            <div id="brute-force-section" x-show="attackMode === 'brute_force'">
                                <label class="block text-sm font-medium text-gray-700">Character Sets</label>
                                <div class="grid grid-cols-2 gap-2 mb-4">
                                    <label class="flex items-center">
                                        <input type="checkbox" name="charset_lowercase"
                                            class="form-checkbox brute-charset" value="lowercase" checked
                                            hx-post="/api/v1/web/attacks/brute_force_preview_fragment"
                                            hx-trigger="change" hx-target="#brute-force-preview-fragment"
                                            hx-swap="outerHTML">
                                        <span class="ml-2 text-sm text-gray-900 dark:text-white">Lowercase (a–z)</span>
                                    </label>
                                    <label class="flex items-center">
                                        <input type="checkbox" name="charset_uppercase"
                                            class="form-checkbox brute-charset" value="uppercase" checked
                                            hx-post="/api/v1/web/attacks/brute_force_preview_fragment"
                                            hx-trigger="change" hx-target="#brute-force-preview-fragment"
                                            hx-swap="outerHTML">
                                        <span class="ml-2 text-sm text-gray-900 dark:text-white">Uppercase (A–Z)</span>
                                    </label>
                                    <label class="flex items-center">
                                        <input type="checkbox" name="charset_numbers"
                                            class="form-checkbox brute-charset" value="numbers" checked
                                            hx-post="/api/v1/web/attacks/brute_force_preview_fragment"
                                            hx-trigger="change" hx-target="#brute-force-preview-fragment"
                                            hx-swap="outerHTML">
                                        <span class="ml-2 text-sm text-gray-900 dark:text-white">Numbers (0–9)</span>
                                    </label>
                                    <label class="flex items-center">
                                        <input type="checkbox" name="charset_symbols"
                                            class="form-checkbox brute-charset" value="symbols" checked
                                            hx-post="/api/v1/web/attacks/brute_force_preview_fragment"
                                            hx-trigger="change" hx-target="#brute-force-preview-fragment"
                                            hx-swap="outerHTML">
                                        <span class="ml-2 text-sm text-gray-900 dark:text-white">Symbols (!@#$)</span>
                                    </label>
                                    <label class="flex items-center">
                                        <input type="checkbox" name="charset_space" class="form-checkbox brute-charset"
                                            value="space" hx-post="/api/v1/web/attacks/brute_force_preview_fragment"
                                            hx-trigger="change" hx-target="#brute-force-preview-fragment"
                                            hx-swap="outerHTML">
                                        <span class="ml-2 text-sm text-gray-900 dark:text-white">Space ( )</span>
                                    </label>
                                </div>
                                <div class="grid grid-cols-2 gap-4 mb-4">
                                    <div>
                                        <label for="brute_min_length"
                                            class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Min
                                            Length</label>
                                        <input type="number" name="brute_min_length" id="brute_min_length" min="1"
                                            value="6" class="form-input w-full" required
                                            hx-post="/api/v1/web/attacks/brute_force_preview_fragment"
                                            hx-trigger="change, keyup delay:300ms"
                                            hx-target="#brute-force-preview-fragment" hx-swap="outerHTML">
                                    </div>
                                    <div>
                                        <label for="brute_max_length"
                                            class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Max
                                            Length</label>
                                        <input type="number" name="brute_max_length" id="brute_max_length" max="64"
                                            value="8" class="form-input w-full" required
                                            hx-post="/api/v1/web/attacks/brute_force_preview_fragment"
                                            hx-trigger="change, keyup delay:300ms"
                                            hx-target="#brute-force-preview-fragment" hx-swap="outerHTML">
                                    </div>
                                </div>
                                <div id="brute-force-preview-fragment">
                                    {% set mask = '?1?1?1?1?1?1?1?1' %}
                                    {% set custom_charset =
                                    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$' %}
                                    {% include "attacks/brute_force_preview_fragment.html.j2" %}
                                </div>
                            </div>
                            <!-- Add more fields as needed for full attack config -->
                        </div>
                        <div class="mt-4" id="attack-estimate-fragment">
                            {% include "attacks/estimate_fragment.html.j2" %}
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button type="submit"
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-700 text-base font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Save Attack
                    </button>
                    <button type="button"
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:w-auto sm:text-sm"
                        @click="$root.remove()">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function attackEditor() {
        return {
            attackMode: '{{ attack.attack_mode if attack else "dictionary" }}',
            wordlistSource: 'existing',
            maskLines: [],
            wordlistInline: [],
            init() {
                this.maskLines = JSON.parse(this.$root.getAttribute('data-mask-lines'));
                this.wordlistInline = JSON.parse(this.$root.getAttribute('data-wordlist-inline'));
            },
            addMaskLine() { this.maskLines.push(''); },
            removeMaskLine(idx) { this.maskLines.splice(idx, 1); },
            addWordInline() { this.wordlistInline.push(''); },
            removeWordInline(idx) { this.wordlistInline.splice(idx, 1); }
        };
    }
</script>