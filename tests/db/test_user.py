# pyright: reportCallIssue=false


import pytest
import sqlalchemy.exc
from sqlalchemy.ext.asyncio import AsyncSession

from app.models.user import UserRole
from tests.factories.user_factory import UserFactory


@pytest.mark.asyncio
async def test_create_user_minimal(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    UserFactory.__async_session__ = db_session  # type: ignore[assignment, unused-ignore]
    user = await user_factory.create_async()
    assert user.id is not None
    assert user.email is not None
    assert user.role == UserRole.ANALYST
    assert user.is_active
    assert user.is_verified


@pytest.mark.asyncio
async def test_user_enum_validation(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    UserFactory.__async_session__ = db_session  # type: ignore[assignment, unused-ignore]
    with pytest.raises(sqlalchemy.exc.StatementError):  # noqa: PT012
        await user_factory.create_async(role="notarole")
        await db_session.commit()


@pytest.mark.asyncio
async def test_user_update_and_delete(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    UserFactory.__async_session__ = db_session  # type: ignore[assignment, unused-ignore]
    user = await user_factory.create_async()
    user.name = "Updated Name"
    await db_session.commit()
    assert user.name == "Updated Name"
    await db_session.delete(user)
    await db_session.commit()
    result = await db_session.get(user.__class__, user.id)
    assert result is None


@pytest.mark.asyncio
async def test_user_api_key_fields(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    """Test that the new API key field is properly added to the User model."""
    user = await user_factory.create_async()

    # Verify API key field exists and is generated by factory
    assert hasattr(user, "api_key")
    assert hasattr(user, "api_key_created_at")
    assert user.api_key is not None
    assert user.api_key.startswith("cst_")
    assert user.api_key_created_at is not None

    # Verify API key format
    parts = user.api_key.split("_")
    assert len(parts) == 3
    assert parts[0] == "cst"
    # parts[1] should be a valid UUID
    import uuid

    uuid.UUID(parts[1])  # This will raise if invalid
    # parts[2] should be a 48-character hex string
    assert len(parts[2]) == 48


@pytest.mark.asyncio
async def test_user_api_key_uniqueness(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    """Test that API keys must be unique across users."""

    # Create first user with API key
    await user_factory.create_async(
        api_key="cst_unique_key_123_abcdef1234567890abcdef1234567890abcdef1234567890"
    )

    # Attempt to create second user with same API key should fail
    with pytest.raises(sqlalchemy.exc.IntegrityError):
        await user_factory.create_async(
            api_key="cst_unique_key_123_abcdef1234567890abcdef1234567890abcdef1234567890"
        )
