# pyright: reportCallIssue=false

from datetime import UTC, datetime

import pytest
import sqlalchemy.exc
from sqlalchemy.ext.asyncio import AsyncSession

from app.models.user import UserRole
from tests.factories.user_factory import UserFactory


@pytest.mark.asyncio
async def test_create_user_minimal(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    UserFactory.__async_session__ = db_session  # type: ignore[assignment, unused-ignore]
    user = await user_factory.create_async()
    assert user.id is not None
    assert user.email is not None
    assert user.role == UserRole.ANALYST
    assert user.is_active
    assert user.is_verified


@pytest.mark.asyncio
async def test_user_enum_validation(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    UserFactory.__async_session__ = db_session  # type: ignore[assignment, unused-ignore]
    with pytest.raises(sqlalchemy.exc.StatementError):  # noqa: PT012
        await user_factory.create_async(role="notarole")
        await db_session.commit()


@pytest.mark.asyncio
async def test_user_update_and_delete(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    UserFactory.__async_session__ = db_session  # type: ignore[assignment, unused-ignore]
    user = await user_factory.create_async()
    user.name = "Updated Name"
    await db_session.commit()
    assert user.name == "Updated Name"
    await db_session.delete(user)
    await db_session.commit()
    result = await db_session.get(user.__class__, user.id)
    assert result is None


@pytest.mark.asyncio
async def test_user_api_key_fields(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    """Test that the new API key fields are properly added to the User model."""
    user = await user_factory.create_async()

    # Verify API key fields exist and are generated by factory
    assert hasattr(user, "api_key_full")
    assert hasattr(user, "api_key_readonly")
    assert hasattr(user, "api_key_full_created_at")
    assert hasattr(user, "api_key_readonly_created_at")

    # Factory should generate API keys
    assert user.api_key_full is not None
    assert user.api_key_readonly is not None
    assert user.api_key_full_created_at is not None
    assert user.api_key_readonly_created_at is not None

    # Verify API key format
    assert user.api_key_full.startswith("cst_")
    assert user.api_key_readonly.startswith("cst_")

    # Test setting API key values

    test_full_key = "cst_test_full_key_12345"
    test_readonly_key = "cst_test_readonly_key_67890"
    test_timestamp = datetime.now(UTC)

    user.api_key_full = test_full_key
    user.api_key_readonly = test_readonly_key
    user.api_key_full_created_at = test_timestamp
    user.api_key_readonly_created_at = test_timestamp

    await db_session.commit()

    # Verify values are persisted
    assert user.api_key_full == test_full_key
    assert user.api_key_readonly == test_readonly_key
    assert user.api_key_full_created_at == test_timestamp
    assert user.api_key_readonly_created_at == test_timestamp


@pytest.mark.asyncio
async def test_user_api_key_uniqueness(
    user_factory: UserFactory, db_session: AsyncSession
) -> None:
    """Test that API keys must be unique across users."""

    # Create first user with API keys
    await user_factory.create_async(
        api_key_full="cst_unique_full_key_123",
        api_key_readonly="cst_unique_readonly_key_456",
    )

    # Test full API key uniqueness - try to create user2 with same full key
    with pytest.raises(sqlalchemy.exc.IntegrityError):
        await user_factory.create_async(
            api_key_full="cst_unique_full_key_123"  # Same as user1
        )

    # Test readonly API key uniqueness - try to create user3 with same readonly key
    with pytest.raises(sqlalchemy.exc.IntegrityError):
        await user_factory.create_async(
            api_key_readonly="cst_unique_readonly_key_456"  # Same as user1
        )
