import pytest

from app.core.services.attack_service import KeyspaceEstimator
from app.models.attack import AttackState
from app.schemas.attack import AttackCreate, AttackMode, AttackResourceEstimationContext


@pytest.mark.parametrize(
    ("attack", "resources", "expected"),
    [
        # Dictionary mode: wordlist_size * rule_count
        (
            AttackCreate(
                name="dict",
                description=None,
                state=AttackState.PENDING,
                hash_type_id=0,
                attack_mode=AttackMode.DICTIONARY,
                attack_mode_hashcat=0,
                hash_mode=0,
                mask=None,
                increment_mode=False,
                increment_minimum=0,
                increment_maximum=0,
                optimized=False,
                slow_candidate_generators=False,
                workload_profile=3,
                disable_markov=False,
                classic_markov=False,
                markov_threshold=0,
                left_rule=None,
                right_rule=None,
                custom_charset_1=None,
                custom_charset_2=None,
                custom_charset_3=None,
                custom_charset_4=None,
                hash_list_id=1,
                hash_list_url="",
                hash_list_checksum="",
                priority=0,
                position=0,
                start_time=None,
                end_time=None,
                campaign_id=None,
                template_id=None,
            ),
            {"wordlist_size": 100, "rule_count": 5},
            500,
        ),
        # Mask mode: 4 positions, all ?l (26^4)
        (
            AttackCreate(
                name="mask",
                description=None,
                state=AttackState.PENDING,
                hash_type_id=0,
                attack_mode=AttackMode.MASK,
                attack_mode_hashcat=0,
                hash_mode=0,
                mask="?l?l?l?l",
                increment_mode=False,
                increment_minimum=0,
                increment_maximum=0,
                optimized=False,
                slow_candidate_generators=False,
                workload_profile=3,
                disable_markov=False,
                classic_markov=False,
                markov_threshold=0,
                left_rule=None,
                right_rule=None,
                custom_charset_1=None,
                custom_charset_2=None,
                custom_charset_3=None,
                custom_charset_4=None,
                hash_list_id=1,
                hash_list_url="",
                hash_list_checksum="",
                priority=0,
                position=0,
                start_time=None,
                end_time=None,
                campaign_id=None,
                template_id=None,
            ),
            {},
            456976,  # 26^4
        ),
        # Hybrid dictionary: wordlist_size * mask_keyspace
        (
            AttackCreate(
                name="hybrid_dict",
                description=None,
                state=AttackState.PENDING,
                hash_type_id=0,
                attack_mode=AttackMode.HYBRID_DICTIONARY,
                attack_mode_hashcat=0,
                hash_mode=0,
                mask="?d?d",
                increment_mode=False,
                increment_minimum=0,
                increment_maximum=0,
                optimized=False,
                slow_candidate_generators=False,
                workload_profile=3,
                disable_markov=False,
                classic_markov=False,
                markov_threshold=0,
                left_rule=None,
                right_rule=None,
                custom_charset_1=None,
                custom_charset_2=None,
                custom_charset_3=None,
                custom_charset_4=None,
                hash_list_id=1,
                hash_list_url="",
                hash_list_checksum="",
                priority=0,
                position=0,
                start_time=None,
                end_time=None,
                campaign_id=None,
                template_id=None,
            ),
            {"wordlist_size": 10},
            1000,  # 10 * (10^2)
        ),
        # Hybrid mask: mask_keyspace * wordlist_size
        (
            AttackCreate(
                name="hybrid_mask",
                description=None,
                state=AttackState.PENDING,
                hash_type_id=0,
                attack_mode=AttackMode.HYBRID_MASK,
                attack_mode_hashcat=0,
                hash_mode=0,
                mask="?u?u",
                increment_mode=False,
                increment_minimum=0,
                increment_maximum=0,
                optimized=False,
                slow_candidate_generators=False,
                workload_profile=3,
                disable_markov=False,
                classic_markov=False,
                markov_threshold=0,
                left_rule=None,
                right_rule=None,
                custom_charset_1=None,
                custom_charset_2=None,
                custom_charset_3=None,
                custom_charset_4=None,
                hash_list_id=1,
                hash_list_url="",
                hash_list_checksum="",
                priority=0,
                position=0,
                start_time=None,
                end_time=None,
                campaign_id=None,
                template_id=None,
            ),
            {"wordlist_size": 5},
            5 * 676,  # 5 * (26^2)
        ),
        # Mask with increment: mask ?d?d, min_len=1, max_len=2 => 10 + 100 = 110
        (
            AttackCreate(
                name="mask_inc",
                description=None,
                state=AttackState.PENDING,
                hash_type_id=0,
                attack_mode=AttackMode.MASK,
                attack_mode_hashcat=0,
                hash_mode=0,
                mask="?d?d",
                increment_mode=True,
                increment_minimum=1,
                increment_maximum=2,
                optimized=False,
                slow_candidate_generators=False,
                workload_profile=3,
                disable_markov=False,
                classic_markov=False,
                markov_threshold=0,
                left_rule=None,
                right_rule=None,
                custom_charset_1=None,
                custom_charset_2=None,
                custom_charset_3=None,
                custom_charset_4=None,
                hash_list_id=1,
                hash_list_url="",
                hash_list_checksum="",
                priority=0,
                position=0,
                start_time=None,
                end_time=None,
                campaign_id=None,
                template_id=None,
            ),
            {},
            110,  # 10^1 + 10^2
        ),
        # Mask with custom charset: mask ?1?1, custom_charset_1='abc' => 3^2 = 9
        (
            AttackCreate(
                name="mask_custom",
                description=None,
                state=AttackState.PENDING,
                hash_type_id=0,
                attack_mode=AttackMode.MASK,
                attack_mode_hashcat=0,
                hash_mode=0,
                mask="?1?1",
                increment_mode=False,
                increment_minimum=0,
                increment_maximum=0,
                optimized=False,
                slow_candidate_generators=False,
                workload_profile=3,
                disable_markov=False,
                classic_markov=False,
                markov_threshold=0,
                left_rule=None,
                right_rule=None,
                custom_charset_1="abc",
                custom_charset_2=None,
                custom_charset_3=None,
                custom_charset_4=None,
                hash_list_id=1,
                hash_list_url="",
                hash_list_checksum="",
                priority=0,
                position=0,
                start_time=None,
                end_time=None,
                campaign_id=None,
                template_id=None,
            ),
            {},
            9,  # 3^2
        ),
        # Edge: empty mask
        (
            AttackCreate(
                name="empty_mask",
                description=None,
                state=AttackState.PENDING,
                hash_type_id=0,
                attack_mode=AttackMode.MASK,
                attack_mode_hashcat=0,
                hash_mode=0,
                mask="",
                increment_mode=False,
                increment_minimum=0,
                increment_maximum=0,
                optimized=False,
                slow_candidate_generators=False,
                workload_profile=3,
                disable_markov=False,
                classic_markov=False,
                markov_threshold=0,
                left_rule=None,
                right_rule=None,
                custom_charset_1=None,
                custom_charset_2=None,
                custom_charset_3=None,
                custom_charset_4=None,
                hash_list_id=1,
                hash_list_url="",
                hash_list_checksum="",
                priority=0,
                position=0,
                start_time=None,
                end_time=None,
                campaign_id=None,
                template_id=None,
            ),
            {},
            1,
        ),
    ],
)
def test_keyspace_estimator(
    attack: AttackCreate, resources: dict[str, object], expected: int
) -> None:
    def _safe_int(val: object, default: int) -> int:
        if isinstance(val, int):
            return val
        if isinstance(val, str) and val.isdigit():
            return int(val)
        return default

    resource_ctx = AttackResourceEstimationContext(
        wordlist_size=_safe_int(resources.get("wordlist_size", 10000), 10000),
        rule_count=_safe_int(resources.get("rule_count", 1), 1),
    )
    result = KeyspaceEstimator.estimate(attack, resource_ctx)
    assert result == expected
